#!/bin/bash
# Interactive kernel module browser and enabler (with "Other modules" option)
# Usage: sudo ./enable_modules_interactive.sh

set -e

KERNEL_DIR="/lib/modules/$(uname -r)"
echo "üîß Kernel version: $(uname -r)"
echo

# --- Function to list directories and let user choose ---
choose_directory() {
  local base_dir="$1"
  local dirs=()

  echo "üìÇ Contents of $base_dir:"
  local i=1
  for d in "$base_dir"*/; do
    [ -d "$d" ] || continue
    dirs+=("$d")
    echo "  [$i] $(basename "$d")"
    ((i++))
  done

  # Check if this folder has any .ko files directly in it
  local other_modules=($(find "$base_dir" -maxdepth 1 -type f -name "*.ko*" | sort))
  if [ ${#other_modules[@]} -gt 0 ]; then
    echo "  [$i] Other modules in this folder"
    dirs+=("other_modules")
  fi

  if [ ${#dirs[@]} -eq 0 ]; then
    echo "‚ö†Ô∏è  No subdirectories or modules found here."
    return 1
  fi

  echo
  read -p "‚û°Ô∏è  Enter number to open a directory (or 'b' to go back): " choice
  if [[ "$choice" == "b" ]]; then
    return 1
  fi

  local selected="${dirs[$((choice-1))]}"
  echo

  if [ "$selected" == "other_modules" ]; then
    scan_modules "$base_dir"
  elif [ -d "$selected" ]; then
    echo "üìÇ You selected: $selected"
    echo
    choose_next "$selected"
  else
    echo "‚ùå Invalid choice."
    return 1
  fi
}

# --- Function to continue browsing deeper ---
choose_next() {
  local dir="$1"
  local subdirs=()
  for s in "$dir"*/; do
    [ -d "$s" ] || continue
    subdirs+=("$s")
  done

  if [ ${#subdirs[@]} -gt 0 ]; then
    choose_directory "$dir"
  else
    scan_modules "$dir"
  fi
}

# --- Function to scan modules and offer to enable ---
scan_modules() {
  local dir="$1"
  echo "üîç Scanning for modules in: $dir"
  echo

  local modules=($(find "$dir" -maxdepth 1 -type f -name "*.ko*" | sort))
  if [ ${#modules[@]} -eq 0 ]; then
    echo "‚ö†Ô∏è  No modules found here."
    return
  fi

  local not_enabled=()
  local index=1
  for m in "${modules[@]}"; do
    modname=$(modinfo --field name "$m" 2>/dev/null)
    [ -z "$modname" ] && continue
    if lsmod | grep -qw "^$modname"; then
      echo "  ‚úÖ [$index] $modname (ENABLED)"
    else
      echo "  ‚ùå [$index] $modname (NOT ENABLED)"
      not_enabled+=("$modname")
    fi
    ((index++))
  done

  echo
  if [ ${#not_enabled[@]} -eq 0 ]; then
    echo "‚úÖ All modules in this folder are already enabled."
    return
  fi

  echo "‚ùå The following modules are NOT enabled:"
  for i in "${!not_enabled[@]}"; do
    echo "  [$((i+1))] ${not_enabled[$i]}"
  done
  echo
  read -p "‚û°Ô∏è  Type numbers (space-separated) of modules to enable, or 'a' for all, or Enter to skip: " choices

  if [ -z "$choices" ]; then
    echo "‚è≠Ô∏è  Skipping enable step."
    return
  fi

  local to_enable=()
  if [[ "$choices" == "a" ]]; then
    to_enable=("${not_enabled[@]}")
  else
    for c in $choices; do
      idx=$((c-1))
      to_enable+=("${not_enabled[$idx]}")
    done
  fi

  echo
  for mod in "${to_enable[@]}"; do
    echo "üîπ Enabling: $mod"
    if sudo modprobe "$mod"; then
      echo "   ‚úÖ Loaded successfully."
    else
      echo "   ‚ö†Ô∏è  Failed to load module: $mod"
    fi
  done
}

# --- Start interactive navigation ---
choose_directory "$KERNEL_DIR/"







sudo nano enable_modules_interactive.sh

sudo chmod +x enable_modules_interactive.sh 

./enable_modules_interactive.sh
